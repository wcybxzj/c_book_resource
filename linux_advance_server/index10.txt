Linux高性能服务器编程(第二篇深入解析高性能服务器编程:第10章信号)
10.1 Linux 信号概述:
//////////////////////////////////////////////////////////////////////////////
10.1.1 发送信号:
//////////////////////////////////////////////////////////////////////////////
10.1.2 信号处理方式:
//////////////////////////////////////////////////////////////////////////////
10.1.3 Liunx信号:
//////////////////////////////////////////////////////////////////////////////
10.1.4 中断系统调用:
SA_RESTART,恢复由信号中断的系统调用.
//////////////////////////////////////////////////////////////////////////////
10.2 信号函数:
//////////////////////////////////////////////////////////////////////////////
10.2.1 signal
//////////////////////////////////////////////////////////////////////////////
10.2.2 sigaction
//////////////////////////////////////////////////////////////////////////////
10.3 信号集
//////////////////////////////////////////////////////////////////////////////
10.3.1 信号集函数
sigemptyset()/sigfillset()/sigaddset()/sigdelset()/sigismember()/
//////////////////////////////////////////////////////////////////////////////
10.3.2 进程信号掩码
sigprocmask()
//////////////////////////////////////////////////////////////////////////////
10.3.3 被挂起的信号
sigpending()
//////////////////////////////////////////////////////////////////////////////
10.4 统一事件源:
使用IO复用和管道,让异步的主要处理逻辑放回到主流程
10-1unievent.cpp:
[php]
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <assert.h>
#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <stdlib.h>
#include <sys/epoll.h>
#include <pthread.h>
#define MAX_EVENT_NUMBER 1024
static int pipefd[2];
int setnonblocking( int fd )
{
	int old_option = fcntl( fd, F_GETFL );
	int new_option = old_option | O_NONBLOCK;
	fcntl( fd, F_SETFL, new_option );
	return old_option;
}
void addfd( int epollfd, int fd )
{
	epoll_event event;
	event.data.fd = fd;
	event.events = EPOLLIN | EPOLLET;
	epoll_ctl( epollfd, EPOLL_CTL_ADD, fd, &event );
	setnonblocking( fd );
}
void sig_handler( int sig )
{
	//恢复由于信号处理函数可能产生的错误为原始错误
	int save_errno = errno;
	int msg = sig;
	send( pipefd[1], ( char* )&msg, 1, 0 );
	errno = save_errno;
}
void addsig( int sig )
{
	struct sigaction sa;
	memset( &sa, '\0', sizeof( sa ) );
	sa.sa_handler = sig_handler;
	//SA_RESTART,恢复由信号中断的系统调用.
	sa.sa_flags |= SA_RESTART;
	sigfillset( &sa.sa_mask );//设置为所有信号
	assert( sigaction( sig, &sa, NULL ) != -1 );
}
int main( int argc, char* argv[] )
{
	printf( "%d\n",( int )getpid() );
	if( argc <= 2 )
	{
		printf( "usage: %s ip_address port_number\n", basename( argv[0] ) );
		return 1;
	}
	const char* ip = argv[1];
	int port = atoi( argv[2] );
	int ret = 0;
	struct sockaddr_in address;
	bzero( &address, sizeof( address ) );
	address.sin_family = AF_INET;
	inet_pton( AF_INET, ip, &address.sin_addr );
	address.sin_port = htons( port );
	int listenfd = socket( PF_INET, SOCK_STREAM, 0 );
	assert( listenfd >= 0 );
	//int nReuseAddr = 1;
	//setsockopt( listenfd, SOL_SOCKET, SO_REUSEADDR, &nReuseAddr, sizeof( nReuseAddr ) );
	ret = bind( listenfd, ( struct sockaddr* )&address, sizeof( address ) );
	if( ret == -1 )
	{
		printf( "errno is %d\n", errno );
		return 1;
	}
	ret = listen( listenfd, 5 );
	assert( ret != -1 );
	epoll_event events[ MAX_EVENT_NUMBER ];
	int epollfd = epoll_create( 5 );
	assert( epollfd != -1 );
	addfd( epollfd, listenfd );
	ret = socketpair( PF_UNIX, SOCK_STREAM, 0, pipefd );
	assert( ret != -1 );
	setnonblocking( pipefd[1] );
	addfd( epollfd, pipefd[0] );
	// add all the interesting signals here
	addsig( SIGHUP );
	addsig( SIGCHLD );
	addsig( SIGTERM );
	addsig( SIGINT );
	bool stop_server = false;
	while( !stop_server )
	{
		int number = epoll_wait( epollfd, events, MAX_EVENT_NUMBER, -1 );
		if ( ( number < 0 ) && ( errno != EINTR ) )
		{
			printf( "epoll failure\n" );
			break;
		}
		for ( int i = 0; i < number; i++ )
		{
			int sockfd = events[i].data.fd;
			if( sockfd == listenfd )
			{
				struct sockaddr_in client_address;
				socklen_t client_addrlength = sizeof( client_address );
				int connfd = accept( listenfd, ( struct sockaddr* )&client_address, &client_addrlength );
				addfd( epollfd, connfd );
			}
			else if( ( sockfd == pipefd[0] ) && ( events[i].events & EPOLLIN ) )
			{
				int sig;
				char signals[1024];
				ret = recv( pipefd[0], signals, sizeof( signals ), 0 );
				if( ret == -1 )
				{
					continue;
				}
				else if( ret == 0 )
				{
					continue;
				}
				else
				{
					for( int i = 0; i < ret; ++i )
					{
						printf( "I caugh the signal %d\n", signals[i] );
						switch( signals[i] )
						{
							case SIGCHLD:
								{
									printf("%s\n","SIGCHLD");
								}
							case SIGHUP:
								{
									printf("%s\n","SIGHUP");
									continue;
								}
							case SIGTERM:
							case SIGINT:
								{
									printf("%s\n","SIGINT");
									stop_server = true;
								}
						}
					}
				}
			}
			else
			{
			}
		}
	}
	printf( "close fds\n" );
	close( listenfd );
	close( pipefd[1] );
	close( pipefd[0] );
	return 0;
}
[/php]
kill -HUP 服务器进程id
//////////////////////////////////////////////////////////////////////////////
10.5 网络编程相关信号:
10.5.1 SIGHUP:
对于没有终端的网络后台程序(xinetd),重新加载配置并且调整服务
Ubuntu-one:
[php]
sudo kill -HUP 4532
[/php]
Ubuntu-two:
[php]
udo lsof -p 4532
COMMAND  PID USER   FD   TYPE             DEVICE SIZE/OFF    NODE NAME
xinetd  4532 root    3r  FIFO                0,8      0t0   77153 pipe
xinetd  4532 root    4w  FIFO                0,8      0t0   77153 pipe
xinetd  4532 root    5u  IPv4              77160      0t0     TCP *:telnet (LISTEN)
xinetd  4532 root    7u  unix 0xffff88011555c600      0t0   77155 socket

ps -ef|grep xinetd
root      4532     1  0  ?         /usr/sbin/xinetd -dontfork -pidfile /var/run/xinetd.pid -stayalive -inetd_compat -inetd_ipv6
wcybxzj   4542  2240  0  pts/4     grep xinetd
[/php]

Ubuntu-three:
==========
[php]
sudo strace -p 4532
Process 4532 attached
1.获取到SIGHUP
select(6, [3 5], NULL, NULL, NULL)      = ? ERESTARTNOHAND (To be restarted if no handler)
--- SIGHUP {si_signo=SIGHUP, si_code=SI_USER, si_pid=4550, si_uid=0} ---
2.从fd4是write 也就是管道写入信号数值1(SIGHUP)
write(4, "\1", 1)                       = 1
rt_sigreturn()                          = -1 EINTR (Interrupted system call)
select(6, [3 5], NULL, NULL, NULL)      = 1 (in [3])
ioctl(3, FIONREAD, [1])                 = 0
3.fd3是read 读取fd4的输入
read(3, "\1", 1)                        = 1
4.然后读取配置文件,启动或者关闭服务
sendto(7, "<29>Sep 17 03:23:33 xinetd[4532]"..., 58, MSG_NOSIGNAL, NULL, 0) = 58
open("/etc/xinetd.conf", O_RDONLY)      = 6
fstat(6, {st_mode=S_IFREG|0644, st_size=289, ...}) = 0
.....省略....
[/php]
//////////////////////////////////////////////////////////////////////////////
10.5.2 SIGPIPE
往读端口关闭的管道或socket写数据将会引发SIGPIPE信号,errno是EPIPE
send设置MSG_NOSIGNAL禁止写操作触发SIGPIPE
使用IO复用系统来检查pipe或者socket读端是否关闭。
在poll下:
当管道写一个关闭的读端,写端获取POLLHUP
当socket链接链接对端关闭的时候,获取POLLRDHUP
//////////////////////////////////////////////////////////////////////////////
10.5.3 SIGURG 带外数据处理(方法2)
10-3sigurg.cpp:
[php]
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <assert.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <signal.h>
#include <fcntl.h>
#include <libgen.h>
#define BUF_SIZE 1024
static int connfd;
void sig_urg( int sig )
{
	int save_errno = errno;
	char buffer[ BUF_SIZE ];
	memset( buffer, '\0', BUF_SIZE );
	int ret = recv( connfd, buffer, BUF_SIZE-1, MSG_OOB );
	printf( "got %d bytes of oob data '%s'\n", ret, buffer );
	errno = save_errno;
}
void addsig( int sig, void ( *sig_handler )( int ) )
{
	struct sigaction sa;
	memset( &sa, '\0', sizeof( sa ) );
	sa.sa_handler = sig_handler;
	sa.sa_flags |= SA_RESTART;
	sigfillset( &sa.sa_mask );
	assert( sigaction( sig, &sa, NULL ) != -1 );
}
int main( int argc, char* argv[] )
{
	if( argc <= 2 )
	{
		printf( "usage: %s ip_address port_number\n", basename( argv[0] ) );
		return 1;
	}
	const char* ip = argv[1];
	int port = atoi( argv[2] );
	struct sockaddr_in address;
	bzero( &address, sizeof( address ) );
	address.sin_family = AF_INET;
	inet_pton( AF_INET, ip, &address.sin_addr );
	address.sin_port = htons( port );
	int sock = socket( PF_INET, SOCK_STREAM, 0 );
	assert( sock >= 0 );
	int ret = bind( sock, ( struct sockaddr* )&address, sizeof( address ) );
	assert( ret != -1 );
	ret = listen( sock, 5 );
	assert( ret != -1 );
	struct sockaddr_in client;
	socklen_t client_addrlength = sizeof( client );
	connfd = accept( sock, ( struct sockaddr* )&client, &client_addrlength );
	if ( connfd < 0 )
	{
		printf( "errno is: %d\n", errno );
	}
	else
	{
		addsig( SIGURG, sig_urg );
		fcntl( connfd, F_SETOWN, getpid() );
		char buffer[ BUF_SIZE ];
		while( 1 )
		{
			memset( buffer, '\0', BUF_SIZE );
			ret = recv( connfd, buffer, BUF_SIZE-1, 0 );
			if( ret <= 0 )
			{
				break;
			}
			printf( "got %d bytes of normal data '%s'\n", ret, buffer );
		}
		close( connfd );
	}
	close( sock );
	return 0;
}
[/php]
Mac-one:
[php]
10$./a.out 192.168.1.111 12345
got 1 bytes of oob data 'c'
got 2 bytes of normal data 'ab'
[/php]

Mac-two:
[php]
5$./a.out 192.168.1.111 12345
send oob data out
[/php]
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////


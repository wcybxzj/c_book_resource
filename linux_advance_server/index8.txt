Linux高性能服务器编程(第二篇深入解析高性能服务器编程:第8章服务器框架)
8.1 服务器模型:
//////////////////////////////////////////////////////////////////////////////
8.1.1 C/S模型:
//////////////////////////////////////////////////////////////////////////////
8.1.2 P2P模型:
//////////////////////////////////////////////////////////////////////////////
8.2 服务器编程框架:
IO+逻辑+存储+请求队列
//////////////////////////////////////////////////////////////////////////////
8.3 IO模型:
阻塞/复用/SIGIO信号/异步IO(前三种IO都是同步IO)
同步IO:IO就绪,用来进行读写
异步IO:IO完成,内核来进行读写,读写直接返回,无论IO是否阻塞
IO复用:阻塞于IO复用系统调用,它只是能监听多个IO事件,对IO的读写是非阻塞的
//////////////////////////////////////////////////////////////////////////////
8.4 两种高效的事件处理模式
8.4.1 Reactor
8.4.2 Proactor
//////////////////////////////////////////////////////////////////////////////
8.5两种高效的并发模式:
8.5.1 半同步/半异步模式:
同步:顺序执行
异步:信号(HUP统一事件源/带外数据/定时器),中断
//////////////////////////////////////////////////////////////////////////////
8.5.2 领导者/追随者
//////////////////////////////////////////////////////////////////////////////
8.6有限状态机:
保证http请求requestline和requestheader数据收集的完整
8-3.httpparser.c
[php]
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <libgen.h>
#define BUFFER_SIZE 4096
enum CHECK_STATE { CHECK_STATE_REQUESTLINE = 0, CHECK_STATE_HEADER, CHECK_STATE_CONTENT };
enum LINE_STATUS { LINE_OK = 0, LINE_BAD, LINE_OPEN };
enum HTTP_CODE { NO_REQUEST, GET_REQUEST, BAD_REQUEST, FORBIDDEN_REQUEST, INTERNAL_ERROR, CLOSED_CONNECTION };
static const char* szret[] = { "I get a correct result\n", "Something wrong\n" };
LINE_STATUS parse_line( char* buffer, int& checked_index, int& read_index )
{
	char temp;
	for ( ; checked_index < read_index; ++checked_index )
	{
		temp = buffer[ checked_index ];
		if ( temp == '\r' )
		{
			if ( ( checked_index + 1 ) == read_index )
			{
				return LINE_OPEN;
			}
			else if ( buffer[ checked_index + 1 ] == '\n' )
			{
				buffer[ checked_index++ ] = '\0';
				buffer[ checked_index++ ] = '\0';
				return LINE_OK;
			}
			return LINE_BAD;
		}
		else if( temp == '\n' )
		{
			if( ( checked_index > 1 ) &&  buffer[ checked_index - 1 ] == '\r' )
			{
				buffer[ checked_index-1 ] = '\0';
				buffer[ checked_index++ ] = '\0';
				return LINE_OK;
			}
			return LINE_BAD;
		}
	}
	return LINE_OPEN;
}
HTTP_CODE parse_requestline( char* szTemp, CHECK_STATE& checkstate )
{
	char* szURL = strpbrk( szTemp, " \t" );
	if ( ! szURL )
	{
		return BAD_REQUEST;
	}
	*szURL++ = '\0';
	char* szMethod = szTemp;
	if ( strcasecmp( szMethod, "GET" ) == 0 )
	{
		printf( "The request method is GET\n" );
	}
	else
	{
		return BAD_REQUEST;
	}
	szURL += strspn( szURL, " \t" );
	char* szVersion = strpbrk( szURL, " \t" );
	if ( ! szVersion )
	{
		return BAD_REQUEST;
	}
	*szVersion++ = '\0';
	szVersion += strspn( szVersion, " \t" );
	if ( strcasecmp( szVersion, "HTTP/1.1" ) != 0 )
	{
		return BAD_REQUEST;
	}
	if ( strncasecmp( szURL, "http://", 7 ) == 0 )
	{
		szURL += 7;
		szURL = strchr( szURL, '/' );
	}
	if ( ! szURL || szURL[ 0 ] != '/' )
	{
		return BAD_REQUEST;
	}
	//URLDecode( szURL );
	printf( "The request URL is: %s\n", szURL );
	checkstate = CHECK_STATE_HEADER;
	return NO_REQUEST;
}
HTTP_CODE parse_headers( char* szTemp )
{
	if ( szTemp[ 0 ] == '\0' )
	{
		return GET_REQUEST;
	}
	else if ( strncasecmp( szTemp, "Host:", 5 ) == 0 )
	{
		szTemp += 5;
		szTemp += strspn( szTemp, " \t" );
		printf( "the request host is: %s\n", szTemp );
	}
	else
	{
		printf( "I can not handle this header\n" );
	}
	return NO_REQUEST;
}
HTTP_CODE parse_content( char* buffer, int& checked_index, CHECK_STATE& checkstate, int& read_index, int& start_line )
{
	LINE_STATUS linestatus = LINE_OK;
	HTTP_CODE retcode = NO_REQUEST;
	while( ( linestatus = parse_line( buffer, checked_index, read_index ) ) == LINE_OK )
	{
		char* szTemp = buffer + start_line;
		start_line = checked_index;
		switch ( checkstate )
		{
			case CHECK_STATE_REQUESTLINE:
				{
					retcode = parse_requestline( szTemp, checkstate );
					if ( retcode == BAD_REQUEST )
					{
						return BAD_REQUEST;
					}
					break;
				}
			case CHECK_STATE_HEADER:
				{
					retcode = parse_headers( szTemp );
					if ( retcode == BAD_REQUEST )
					{
						return BAD_REQUEST;
					}
					else if ( retcode == GET_REQUEST )
					{
						return GET_REQUEST;
					}
					break;
				}
			default:
				{
					return INTERNAL_ERROR;
				}
		}
	}
	if( linestatus == LINE_OPEN )
	{
		return NO_REQUEST;
	}
	else
	{
		return BAD_REQUEST;
	}
}
int main( int argc, char* argv[] )
{
	if( argc <= 2 )
	{
		printf( "usage: %s ip_address port_number\n", basename( argv[0] ) );
		return 1;
	}
	const char* ip = argv[1];
	int port = atoi( argv[2] );
	struct sockaddr_in address;
	bzero( &address, sizeof( address ) );
	address.sin_family = AF_INET;
	inet_pton( AF_INET, ip, &address.sin_addr );
	address.sin_port = htons( port );
	int listenfd = socket( PF_INET, SOCK_STREAM, 0 );
	assert( listenfd >= 0 );
	int ret = bind( listenfd, ( struct sockaddr* )&address, sizeof( address ) );
	assert( ret != -1 );
	ret = listen( listenfd, 5 );
	assert( ret != -1 );
	struct sockaddr_in client_address;
	socklen_t client_addrlength = sizeof( client_address );
	int fd = accept( listenfd, ( struct sockaddr* )&client_address, &client_addrlength );
	if( fd < 0 )
	{
		printf( "errno is: %d\n", errno );
	}
	else
	{
		char buffer[ BUFFER_SIZE ];
		memset( buffer, '\0', BUFFER_SIZE );
		int data_read = 0;
		int read_index = 0;
		int checked_index = 0;
		int start_line = 0;
		CHECK_STATE checkstate = CHECK_STATE_REQUESTLINE;
		while( 1 )
		{
			data_read = recv( fd, buffer + read_index, BUFFER_SIZE - read_index, 0 );
			if ( data_read == -1 )
			{
				printf( "reading failed\n" );
				break;
			}
			else if ( data_read == 0 )
			{
				printf( "remote client has closed the connection\n" );
				break;
			}
			read_index += data_read;
			HTTP_CODE result = parse_content( buffer, checked_index, checkstate, read_index, start_line );
			if( result == NO_REQUEST )
			{
				continue;
			}
			else if( result == GET_REQUEST )
			{
				send( fd, szret[0], strlen( szret[0] ), 0 );
				break;
			}
			else
			{
				send( fd, szret[1], strlen( szret[1] ), 0 );
				break;
			}
		}
		close( fd );
	}
	close( listenfd );
	return 0;
}
[/php]
./a.out 127.0.0.1 12345
The request method is GET
The request URL is: /
the request host is: 127.0.0.1:12345
I can not handle this header


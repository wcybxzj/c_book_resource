Linux高性能服务器编程(第二篇深入解析高性能服务器编程:第6章高级IO函数):
6.1 pipe函数:
pipe:单方向通信,fd[0]读,fd[1]写
setsockpair:基于AF_UNIX,双向通信 fd[0] fd[1] 都可读写
/////////////////////////////////////////////////////////
6.2 dup函数和dup2函数:
6-1.testdup.c:
[php]
#include <sys/socket.h>
#include <arpa/inet.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <stdio.h>
#include <libgen.h>
int main(int argc, char *argv[])
{
	if(argc <= 2) {
		printf( "usage %s ip port \n" ,basename( argv[0] ) );
		return 1;
	}
	const char* ip = argv[1];
	int port = atoi( argv[2] );
	struct sockaddr_in address;
	bzero( &address, sizeof( address ) );
	address.sin_family = AF_INET;
	inet_pton( AF_INET, ip, &address.sin_addr );
	address.sin_port = htons( port );
	int sock = socket( PF_INET, SOCK_STREAM, 0 );
	assert( sock >= 0 );
	int ret = bind( sock, (struct sockaddr* )&address, sizeof( address ) );
	assert( ret != -1 );
	ret = listen( sock, 5);
	assert( ret != -1 );
	struct sockaddr_in client;
	socklen_t client_addrlength = sizeof( client );
	int connfd = accept( sock, (struct sockaddr*)&client, &client_addrlength );
	if ( connfd < 0 ) {
		printf("errno is: %d\n", errno);
	}else {
		close( STDOUT_FILENO );
		dup( connfd );
		printf("abcdefg\n");
		close( connfd );
	}
	close( sock );
	return 0;
}
[/php]
/////////////////////////////////////////////////////////
6.3 readv 和writev
6-2.testwritev.cpp:
[php]
#include <sys/socket.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <libgen.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <errno.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <sys/uio.h>
#define BUFFER_SIZE 1024
static const char* status_line[2] = { "200 OK", "500 Internal server error" };
int main(int argc, char *argv[])
{
	if ( argc <= 3 ) {
		printf("useage: %s ip port filename\n", basename( argv[0] ) );
		return 1;
	}
	const char* ip = argv[1];
	int port = atoi( argv[2] );
	const char* file_name = argv[3];
	struct sockaddr_in address;
	bzero( &address, sizeof( address ) );
	address.sin_family = AF_INET;
	inet_pton( AF_INET, ip, &address.sin_addr);
	address.sin_port = htons( port );
	int sock = socket( PF_INET, SOCK_STREAM, 0 );
	assert( sock >= 0);
	int ret = bind( sock, (struct sockaddr* )&address, sizeof( address ) );
	assert( ret != -1);
	ret = listen( sock, 5);
	assert( ret != -1);
	struct sockaddr_in client;
	socklen_t  client_addrlength = sizeof( client );
	int connfd = accept( sock, ( struct sockaddr* )&client, &client_addrlength );
	if ( connfd < 0 ) {
		printf("errno is: %d\n", errno );
	}else {
		char header_buf[ BUFFER_SIZE ];
		memset( header_buf, '\0', BUFFER_SIZE );
		char* file_buf;
		struct stat file_stat;
		bool valid = true;
		int len = 0;
		if ( stat( file_name, &file_stat ) < 0 ) {
			valid = false;
		}else {
			if ( S_ISDIR( file_stat.st_mode ) ) {
				valid = false;
			}else if( file_stat.st_mode &S_IROTH ){
				int fd = open( file_name, O_RDONLY );
				file_buf = new char[ file_stat.st_size + 1 ];
				memset( file_buf, '\0', file_stat.st_size +1 );
				if ( read( fd, file_buf, file_stat.st_size ) < 0 ) {
					valid = false;
				}
			}
			else {
				valid = false;
			}
		}
		if ( valid ) {
			ret = snprintf( header_buf, BUFFER_SIZE-1, "%s %s \r\n", "HTTP/1.1", status_line[0] );
			len +=ret;
			ret = snprintf( header_buf + len, BUFFER_SIZE-1-len, "Content-Length: %lld\r\n", file_stat.st_size );
			len +=ret;
			ret = snprintf( header_buf + len, BUFFER_SIZE-1-len, "%s", "\r\n" );
			struct iovec iv[2];
			iv[ 0 ].iov_base = header_buf;
			iv[ 0 ].iov_len = strlen( header_buf );
			iv[ 1 ].iov_base = file_buf;
			iv[ 1 ].iov_len = file_stat.st_size;
			ret = writev( connfd, iv, 2);
		}else {
			ret = snprintf( header_buf, BUFFER_SIZE-1, "%s %s\r\n", "HTTP/1.1", status_line[1] );
			len += ret;
			ret = snprintf( header_buf, BUFFER_SIZE-1-len, "%s", "\r\n");
			send( connfd, header_buf, strlen( header_buf), 0);
		}
		close( connfd );
		delete [] file_buf;
	}
	close( sock );
	return 0;
}
[/php]
Mac-one:
[php]
g++ 6-2.testwritev.cpp
./a.out 127.0.0.1 12345 1.txt
[/php]

Mac-two:
[php]
telnet 127.0.0.1 12345
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
HTTP/1.1 200 OK
Content-Length: 12
1234567890!
[/php]

Mac-three:
[php]
sudo tcpdump -entxS  -i lo0 port 12345
[/php]
telnet 和 浏览器抓包的结果不一样:
telnet只有一个http,
web有2个包第2个包是,web的http 请求包
/////////////////////////////////////////////////////////
6.4 sendfile函数
在内核中对两个文件描述符直接传递数据(零传输)(only work in linux)(网络传输专用)
mac和linux使用方法不同
6-3.testsendfile.c
[php]
#include <sys/socket.h>
#include <stdio.h>
#include <libgen.h>
#include <errno.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <assert.h>
#include <arpa/inet.h>
#include <string.h>
#include <unistd.h>
int main(int argc, char *argv[])
{
	if ( argc <= 3) {
		printf("useage: %s ip port filename\n",basename( argv[0] ) );
		return 1;
	}
	const char* ip = argv[1];
	int port = atoi( argv[2] );
	const char* filename = argv[3];
	int filefd = open( filename, O_RDONLY );
	assert( filefd > 0 );
	struct stat stat_buf;
	fstat(filefd, &stat_buf);
	struct sockaddr_in address;
	bzero( &address, sizeof( address ) );
	address.sin_family = AF_INET;
	inet_pton( AF_INET, ip, &address.sin_addr );
	address.sin_port = htons( port );
	int sock = socket( PF_INET, SOCK_STREAM, 0 );
	assert( sock >= 0 );
	int ret= bind( sock, ( struct sockaddr* )&address, sizeof( address ) );
	assert( ret != -1 );
	ret = listen( sock, 5 );
	assert( ret != -1 );
	struct sockaddr_in client;
	socklen_t client_addrlength = sizeof( client );
	int connfd = accept( sock, ( struct sockaddr*)&client, &client_addrlength );
	if ( connfd < 0 ) {
		printf("errno is: %d\n", errno);
	}else {
		sendfile( connfd, filefd, NULL, stat_buf.st_size );
		close( connfd );
	}
	close( sock );
	return 0;
}
[/php]
/////////////////////////////////////////////////////////
6.5 mmap函数和munmap函数
/////////////////////////////////////////////////////////
6.6 splice函数
在内核中对两个文件描述符直接传递数据(零传输)(only work in linux)
至少有一个文件描述符是管道
6-4.testsplice.c:
[php]
#define _GNU_SOURCE
#include <fcntl.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <assert.h>
#include <stdio.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <libgen.h>
#include <stdlib.h>
#include <fcntl.h>
int main(int argc, char *argv[])
{
	if ( argc <= 2 ) {
		printf("usage: %s ip port \n", basename( argv[0] ) );
		return 1;
	}
	const char*ip = argv[1];
	int port = atoi( argv[2] );
	struct sockaddr_in address;
	bzero(&address, sizeof( address ) );
	address.sin_family = AF_INET;
	inet_pton( AF_INET, ip, &address.sin_addr );
	address.sin_port = htons( port );

	int sock = socket( PF_INET, SOCK_STREAM, 0 );
	assert( sock >= 0 );
	int ret = bind( sock, ( struct sockaddr* )&address, sizeof( address ) );
	assert( ret != -1);
	ret = listen( sock, 5 );
	assert( ret != -1);

	struct sockaddr_in client;
	socklen_t client_addrlength = sizeof( client );
	int connfd = accept( sock, (struct sockaddr* )&client, &client_addrlength );
	if ( connfd < 0 ) {
		printf("errno is %d\n", errno );
	}else {
		int pipefd[2];
		ret = pipe( pipefd );
		ret = splice( connfd, NULL, pipefd[1], NULL, 32768, SPLICE_F_MORE | SPLICE_F_MOVE );
		assert( ret != -1 );
		ret = splice( pipefd[0], NULL, connfd, NULL, 32768, SPLICE_F_MORE | SPLICE_F_MOVE );
		assert( ret != -1);
		close( connfd );
	}
	close( sock );
	return 0;
}
[/php]
/////////////////////////////////////////////////////////
6.7 tee函数
两个管道文件(零传输)(only work in linux)
[php]
#define _GNU_SOURCE
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <assert.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
int main(int argc, const char *argv[])
{
	if ( argc != 2 ) {
		printf( "useage: %s <file>\n", argv[0] );
		return 1;
	}
	int filefd = open( argv[1], O_CREAT | O_WRONLY | O_TRUNC, 0666 );
	assert( filefd > 0 );

	int pipefd_stdout[2];
	int ret = pipe( pipefd_stdout );
	assert( ret != -1 );
	int pipefd_file[2];
	ret = pipe( pipefd_file );
	assert( ret != -1 );

	ret = splice( STDIN_FILENO, NULL,pipefd_stdout[1], NULL, 32768, SPLICE_F_MOVE | SPLICE_F_MORE );
	assert( ret != -1 );
	ret = tee(pipefd_stdout[0], pipefd_file[1], 32768, SPLICE_F_NONBLOCK );
	assert( ret != -1 );
	ret = splice(pipefd_file[0], NULL, filefd, NULL, 32768, SPLICE_F_MORE | SPLICE_F_MOVE);
	assert( ret != -1 );
	ret = splice( pipefd_stdout[0], NULL, STDOUT_FILENO, NULL, 32678, SPLICE_F_MORE | SPLICE_F_MOVE );
	assert( ret != -1 );

	close( filefd );
	close( pipefd_stdout[0] );
	close( pipefd_stdout[1] );
	close( pipefd_file[0] );
	close( pipefd_file[1] );
	return 0;
}
[/php]
/////////////////////////////////////////////////////////
6.8 fcntl 函数

